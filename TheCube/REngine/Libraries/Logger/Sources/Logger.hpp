#pragma once

////////////////////////////////////////////////////////////////////////////////
// Logger library
////////////////////////////////////////////////////////////////////////////////
#include "Policy.hpp"
#include "Utilities.hpp"
////////////////////////////////////////////////////////////////////////////////
// C++ Standard Library
////////////////////////////////////////////////////////////////////////////////
#include <memory>
#include <mutex>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
LOGGER_NAMESPACE_BEGIN (Logger)
////////////////////////////////////////////////////////////////////////////////

class Logger
{
 public:
  void SetPolicy (const Policy::Console& policy);
  void SetPolicy (const Policy::File& policy);

  auto GetLogFunctionAndLockIt () -> void*;
  void UnlockLogFunction ();

  static auto Initialize () -> void;
  static auto Instance () -> std::unique_ptr<Logger>&;

 private:
  auto SetForegroundColor (Policy::Properties::Color color) -> void;
  auto SetBackgroundColor (Policy::Properties::Color color) -> void;

 private:
  static std::unique_ptr<Logger> logger;
};

////////////////////////////////////////////////////////////////////////////////
LOGGER_NAMESPACE_END (Logger)
////////////////////////////////////////////////////////////////////////////////

#include "Logger.inl"

#pragma once

////////////////////////////////////////////////////////////////////////////////
// REngine Base
////////////////////////////////////////////////////////////////////////////////
#include <REngine/Core/ReCoreBase>
////////////////////////////////////////////////////////////////////////////////
// C++ Standard Library
////////////////////////////////////////////////////////////////////////////////
#include <memory>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
NAMESPACE_BEGIN (REngine::Core)
////////////////////////////////////////////////////////////////////////////////

template <typename ClassName>
class implementedBy
{
 protected:
  implementedBy () = default;
  ~implementedBy () = default;

  implementedBy (implementedBy&) = delete;
  implementedBy (implementedBy&&) = default;

  implementedBy& operator= (const implementedBy&) = delete;
  implementedBy& operator= (implementedBy&&) = default;

 protected:
  std::unique_ptr<ClassName> ptr_;
};

////////////////////////////////////////////////////////////////////////////////
NAMESPACE_END (REngine::Core)
////////////////////////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////////////////////////
// REngine Base
#include <REngine/Core/ReCoreBase>
////////////////////////////////////////////////////////////////////////////////
// REngine Library
////////////////////////////////////////////////////////////////////////////////
#include "Utilities/String.hpp"
#include "Utilities/StringView.hpp"
////////////////////////////////////////////////////////////////////////////////
// System headers
////////////////////////////////////////////////////////////////////////////////
#include <Windows.h>
////////////////////////////////////////////////////////////////////////////////
// C++ Standard Library
////////////////////////////////////////////////////////////////////////////////
#include <functional>
#include <memory>
#include <string_view>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
NAMESPACE_BEGIN (REngine::Core)
////////////////////////////////////////////////////////////////////////////////

class Library_Implementation_Win {
public:
  Library_Implementation_Win (const std::string_view& filename);
  ~Library_Implementation_Win ();

public:
  auto GetFilename () noexcept -> const std::string_view;
  void Load () noexcept;
  auto Unload () noexcept -> bool;

  template <typename FuncType>
  auto ResolveSymbol (const std::string_view& symbol)
    -> std::function<FuncType>;

private:
  HMODULE libraryHandle;
  std::unique_ptr<REngine::Core::String> filename;
};

////////////////////////////////////////////////////////////////////////////////
// Inline methods
////////////////////////////////////////////////////////////////////////////////
template <typename FuncType>
inline std::function<FuncType>
  Library_Implementation_Win::ResolveSymbol (const std::string_view& symbol)
{
  if (nullptr != libraryHandle)
  {
    auto ptr = reinterpret_cast<FuncType*> (
      GetProcAddress (libraryHandle, symbol.data ()));
    return std::function<FuncType>{ptr};
  }
  else
  {
    return std::function<FuncType>{nullptr};
  }
}

////////////////////////////////////////////////////////////////////////////////
// Type declarations
////////////////////////////////////////////////////////////////////////////////
using Library_Implementation = Library_Implementation_Win;

////////////////////////////////////////////////////////////////////////////////
NAMESPACE_END (REngine::Core)
////////////////////////////////////////////////////////////////////////////////

#pragma once

////////////////////////////////////////////////////////////////////////////////
// REngine Base
////////////////////////////////////////////////////////////////////////////////
#include <REngine/Core/ReCoreBase>
////////////////////////////////////////////////////////////////////////////////
// REngine Library
////////////////////////////////////////////////////////////////////////////////
#include "Platforms/DynamicLibrary_Platform.hpp"
#include "implementedBy.hpp"
////////////////////////////////////////////////////////////////////////////////
// C++ Standard Library
////////////////////////////////////////////////////////////////////////////////
#include <functional>
#include <string_view>
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
NAMESPACE_BEGIN (REngine::Core)
////////////////////////////////////////////////////////////////////////////////

class DynamicLibrary : implementedBy<Library_Implementation>
{
 public:
  DynamicLibrary (const char* filename);
  DynamicLibrary (const std::string_view& filename);

 public:
  DynamicLibrary (DynamicLibrary&& library);

 public:
  DynamicLibrary& operator= (DynamicLibrary&&);

 public:
  auto GetFilename () noexcept -> const std::string_view;
  auto IsLoaded () noexcept -> bool;

  auto Load () -> void;
  auto Unload () -> bool;

 public:
  template <typename FuncType>
  auto ResolveSymbol (const std::string_view& symbol)
    -> std::function<FuncType>;
};

////////////////////////////////////////////////////////////////////////////////
NAMESPACE_END (REngine::Core)
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Inline methods
////////////////////////////////////////////////////////////////////////////////
#include "DynamicLibrary.inl"
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Dynamic link library function definition
////////////////////////////////////////////////////////////////////////////////
// API export
#if defined(_MSC_VER)
#  define re_API_EXPORT __declspec(dllexport)
#else
#  define re_API_EXPORT
#endif // defined (_MSC_VER)
// 1. Define a function
// 2. Define the type of the function
#define re_ExportFunction(returnType, functionName, arguments)                 \
  extern "C"                                                                   \
  {                                                                            \
    re_API_EXPORT returnType functionName arguments;                           \
  }                                                                            \
                                                                               \
  using functionName##_funcType = decltype (functionName);
////////////////////////////////////////////////////////////////////////////////
